.section .text

    .word 0x33334b52 // RK33
    b start

start:
    // Mux to JTAG
    ldr x0, =0xff14001c
    ldr w1, =0x00ff0033
    str w1, [x0]
    //ldr x0, =0xff140504
    //ldr w1, =0x00800080
    //str w1, [x0]

    // UART2 init

    // Select 24MHz source
    ldr x0, =0xff2b0194
    // CRU_CLKSEL_CON37
    // clk_uart2_div_con = 0
    // clk_uart2_pll_sel = xin_osc0
    ldr w1, =0xc01f4000
    str w1, [x0]
    // CRU_CLKSEL_CON38
    // clk_uart2_sel = clk_uart2
    ldr w1, =0xc0000000
    str w1, [x0, #0x4]

    // Setup registers
    ldr x0, =0xff160000
    // UART_LCR
    // data_length_sel = 8 bits
    // stop_bits_num = 1 stop bit
    // parity_en = 0
    // even_parity_sel = odd
    // break_ctrl = 0
    // div_lat_access = 1
    ldr w1, =0x83
    str w1, [x0, #0xc]
    // UART_DLL
    // baud_rate_divisor_L = 1 => /16 => 1500000 baud
    ldr w1, =0x01
    str w1, [x0]
    // UART_LCR
    // div_lat_access = 0
    ldr w1, =0x03
    str w1, [x0, #0xc]
    // UART_SFE
    // shadow_fifo_en = 1
    ldr w1, =0x1
    str w1, [x0, #0x98]

    // Set mux
    // GRF_GPIO1D_IOMUX_L
    // gpio1d2_sel = uart2dbg_txm0
    // gpio1d3_sel = uart2dbg_rxm0
    ldr x0, =0xff140018
    ldr w1, =0xff002200
    str w1, [x0]

    // ------------------------------------------------------------------------

    // Dump memory as hex from x29 to x28
    ldr x29, =0xffff0000
    ldr x28, =0x100000000
1:
    ldrb w0, [x29]
    bl write_hex_byte
    add x29, x29, #1
    cmp x29,x28
    b.lo 1b

    // Spin
    b .

put_char:
    ldr x1, =0xff160000
    str w0, [x1]
1:
    ldr w0, [x1, #0x14]
    tbz x0, 5, 1b
    ret

// Below generated by GCC

// void put_char(char ch);
// 
// void write_hex_nybble(unsigned char num) {
//     if (num > 9)
//         put_char('a' + num - 10);
//     else
//         put_char('0' + num);
// }
// 
// void write_hex_byte(unsigned char num) {
//     write_hex_nybble(num >> 4);
//     write_hex_nybble(num & 0xf);
//     put_char(' ');
// }

write_hex_byte:
        stp     x29, x30, [sp, -32]!
        ubfx    w1, w0, 4, 4
        mov     x29, sp
        str     x19, [sp, 16]
        and     w19, w0, 255
        cmp     w1, 9
        bls     .L5
        add     w0, w1, 87
        bl      put_char
        and     w0, w19, 15
        cmp     w0, 9
        bls     .L7
.L10:
        add     w0, w0, 87
        bl      put_char
        ldr     x19, [sp, 16]
        mov     w0, 32
        ldp     x29, x30, [sp], 32
        b       put_char
.L5:
        add     w0, w1, 48
        bl      put_char
        and     w0, w19, 15
        cmp     w0, 9
        bhi     .L10
.L7:
        add     w0, w0, 48
        bl      put_char
        ldr     x19, [sp, 16]
        mov     w0, 32
        ldp     x29, x30, [sp], 32
        b       put_char
